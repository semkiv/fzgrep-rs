[package]
name = "fzgrep"
description = """Fuzzy grep implemented in Rust. Under the hood uses `vs-code-fuzzy-score-rs crate` - \
    a Rust implementation of Visual Studio Code fuzzy score algorithm."""
keywords = ["fuzzy", "grep"]
categories = ["command-line-utilities"]
version = "2.0.0"
authors = ["Andrii Semkiv <semkiv@gmail.com>"]
license = "MIT"
repository = "https://github.com/semkiv/fzgrep-rs"
edition = "2024"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
clap = "4.5.40"
env_logger = "0.11.8"
glob = "0.3.2"
log = "0.4.27"
path-slash = "0.2.1"
vscode-fuzzy-score-rs = { git = "https://github.com/semkiv/vs-code-fuzzy-score-rs.git", tag = "v0.2.8" }
walkdir = "2.5.0"
yansi = "1.0.1"

[dev-dependencies]
tempfile = "3.20.0"

[lints.clippy]
cargo = { level = "warn", priority = -1 }
complexity = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
debug_assert_with_mut_call = "deny"
redundant_pub_crate = "allow"
pedantic = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
suspicious = { level = "warn", priority = -1 }

# 'restriction' set as of clippy version Rust 1.88
absolute_paths = "warn"
# alloc_instead_of_core = "warn" # irrelevant: no plans regarding `no_std`
allow_attributes = "warn"
allow_attributes_without_reason = "warn"
# arbitrary_source_item_ordering = "warn" # too noisy
arithmetic_side_effects = "warn"
as_conversions = "warn"
as_pointer_underscore = "deny"
as_underscore = "deny"
assertions_on_result_states = "warn"
# big_endian_bytes = "warn" # irrelevant: we do not depend on endiannes
cfg_not_test = "deny"
clone_on_ref_ptr = "warn"
create_dir = "warn"
dbg_macro = "warn"
decimal_literal_representation = "warn"
default_numeric_fallback = "warn"
default_union_representation = "warn"
deref_by_slicing = "allow"
disallowed_script_idents = "deny"
doc_include_without_cfg = "deny"
else_if_without_else = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
error_impl_error = "warn"
# exhaustive_enums = "warn" # largely irrelevant: ABI stability is approached quite carelessly in this project
# exhaustive_structs = "warn" # largely irrelevant: ABI stability is approached quite carelessly in this project
exit = "warn"
expect_used = "warn"
field_scoped_visibility_modifiers = "warn"
filetype_is_file = "warn"
float_arithmetic = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
get_unwrap = "warn"
# host_endian_bytes = "warn" # irrelevant: endiannes should not matter
if_then_some_else_none = "warn"
impl_trait_in_params = "allow"
implicit_return = "allow"
indexing_slicing = "warn"
infinite_loop = "warn"
# inline_asm_x86_att_syntax = "warn" # irrelevant: no assembly is anticipated
# inline_asm_x86_intel_syntax = "warn" # irrelevant: no assembly is anticipated
integer_division = "warn"
# integer_division_remainder_used = "warn" # allegedly important in cryptographic contexts, but largely irrelevant for this project
iter_over_hash_type = "warn"
large_include_file = "warn"
let_underscore_must_use = "warn"
let_underscore_untyped = "warn"
# little_endian_bytes = "warn" # irrelevant: we do not depend on endiannes
lossy_float_literal = "deny"
map_err_ignore = "warn"
map_with_unused_argument_over_ranges = "warn"
mem_forget = "deny"
min_ident_chars = "warn"
missing_assert_message = "warn"
missing_asserts_for_indexing = "warn"
missing_docs_in_private_items = "allow"
missing_inline_in_public_items = "allow"
missing_trait_methods = "allow"
mixed_read_write_in_expression = "warn"
mod_module_files = "warn"
module_name_repetitions = "warn"
modulo_arithmetic = "warn"
multiple_inherent_impl = "warn"
multiple_unsafe_ops_per_block = "warn"
mutex_atomic = "warn"
mutex_integer = "warn"
needless_raw_strings = "warn"
non_ascii_literal = "warn"
non_zero_suggestions = "warn"
panic = "warn"
panic_in_result_fn = "warn"
partial_pub_fields = "warn"
pathbuf_init_then_push = "warn"
pattern_type_mismatch = "allow"
precedence_bits = "warn"
print_stderr = "warn"
print_stdout = "allow"
pub_use = "warn"
pub_with_shorthand = "allow"
pub_without_shorthand = "warn"
question_mark_used = "allow"
rc_buffer = "warn"
rc_mutex = "deny"
redundant_test_prefix = "deny"
redundant_type_annotations = "warn"
ref_patterns = "warn"
renamed_function_params = "warn"
rest_pat_in_fully_bound_structs = "warn"
return_and_then = "warn"
same_name_method = "warn"
self_named_module_files = "allow"
semicolon_inside_block = "allow"
semicolon_outside_block = "warn"
separated_literal_suffix = "allow"
shadow_reuse = "allow"
shadow_same = "warn"
shadow_unrelated = "warn"
single_call_fn = "allow"
single_char_lifetime_names = "warn"
# std_instead_of_alloc = "warn" # irrelevant: no plans regarding `no_std`
# std_instead_of_core = "warn" # irrelevant: no plans regarding `no_std`
str_to_string = "warn"
string_add = "warn"
string_lit_chars_any = "warn"
string_slice = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unneeded_field_pattern = "warn"
unreachable = "warn"
unseparated_literal_suffix = "warn"
unused_result_ok = "warn"
unused_trait_names = "warn"
unwrap_in_result = "warn"
use_debug = "warn"
verbose_file_reads = "warn"
wildcard_enum_match_arm = "warn"
unwrap_used = "warn"
